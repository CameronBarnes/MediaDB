/*
 *     AddPoolForm
 *     Last Modified: 2023-09-15, 8:55 p.m.
 *     Copyright (C) 2023-09-16, 3:13 p.m.  CameronBarnes
 *
 *     This program is free software: you can redistribute it and/or modify
 *     it under the terms of the GNU General Public License as published by
 *     the Free Software Foundation, either version 3 of the License, or
 *     (at your option) any later version.
 *
 *     This program is distributed in the hope that it will be useful,
 *     but WITHOUT ANY WARRANTY; without even the implied warranty of
 *     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *     GNU General Public License for more details.
 *
 *     You should have received a copy of the GNU General Public License
 *     along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

package ca.bigcattech.MediaDB.gui.forms;

import ca.bigcattech.MediaDB.core.Session;
import ca.bigcattech.MediaDB.db.pool.Pool;
import ca.bigcattech.MediaDB.gui.components.AutoCompleteTextField;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.Optional;

public class AddPoolForm {

    public JPanel mContent;
    private JButton mAdd;
    private JButton mSearch;
    private AutoCompleteTextField mAutoTextField;
    private JButton mNew;

    private final Session mSession;
    Pool[] mContentPools;

    private final Pool mOutPool = null;
    private volatile boolean mDone = false;

    public AddPoolForm(Session session) {

        mSession = session;

        $$$setupUI$$$();
        ArrayList<String> dictionary = new ArrayList<>(mSession.getDBHandler().getAllPoolNames());
        mContentPools = mSession.getDBHandler().getPoolFromUID(session.getContent().getPools());
        dictionary.removeIf(str -> {
            if (str.matches("^[0-9]+$")) return true;
            for (Pool pool : mContentPools) {
                if (pool.getTitle().equals(str)) return true;
            }
            return false;
        });
        //dictionary.addAll(mSession.getDictionary()); \\Not sure why I was doing this, I'll re-add it later if I figure out why it was here

        mAutoTextField.setDictionary(dictionary);
        mAutoTextField.addActionListener(e -> {


        });

    }

    public void exit() {

        mDone = true;

    }

    public Optional<Pool> getAddedPool() {

        while (!mDone) {
            try {
                Thread.sleep(100);
            } catch (InterruptedException e) {
                e.printStackTrace();
            }
        }

        return Optional.ofNullable(mOutPool);

    }

    private void createUIComponents() {

        mAutoTextField = new AutoCompleteTextField();

    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mContent = new JPanel();
        mContent.setLayout(new GridLayoutManager(3, 3, new Insets(0, 0, 0, 0), -1, -1));
        mContent.setMinimumSize(new Dimension(400, 150));
        mContent.add(mAutoTextField, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        mSearch = new JButton();
        mSearch.setText("Search");
        mContent.add(mSearch, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setText("Add Content to Pool:");
        mContent.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mNew = new JButton();
        mNew.setText("New");
        mContent.add(mNew, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        mAdd = new JButton();
        mAdd.setText("Add");
        mContent.add(mAdd, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mContent;
    }

}
